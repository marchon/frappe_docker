#!/bin/bash

display_usage() {
  echo "$(basename "$0") [-h] [-c \"<command to be executed inside container>\"]"
  echo ''
  echo 'where:'
  echo '    -h    show this help text'
  echo '    -c    execute a command inside docker using docker exec'
  echo '    -s    adds site-names to /etc/hosts file in the container to facilitate multisite access'
  echo '    init  initializes frappe-bench adds a new-site bench-manager.local and installs the bench_manager app
            app onto it'
}

if [[ $# -eq 0 ]]; then
  docker exec -it frappe bash

elif [ $1 == 'init_volumes' ]
then

  docker rm helper
  docker volume rm frappe-frappe-bench-workdir
  docker volume rm frappe-mariadb-conf
  docker volume rm frappe-redis-cache-conf
  docker volume rm frappe-redis-queue-conf
  docker volume rm frappe-redis-socketio-conf

  docker volume create frappe-frappe-bench-workdir 
  docker run -v frappe-frappe-bench-workdir:/data --name helper alpine true
  docker cp ./frappe-bench/. helper:/data
  docker rm helper

  docker volume create frappe-mariadb-conf 
  docker run -v frappe-mariadb-conf:/data --name helper alpine true
  docker cp ./conf/mariadb/. helper:/data
  docker rm helper

  docker volume create frappe-redis-cache-conf
  docker run -v frappe-redis-cache-conf:/data --name helper alpine true
  docker cp ./conf/redis/redis-cache.conf helper:/data
  docker rm helper

  docker volume create frappe-redis-queue-conf
  docker run -v frappe-redis-queue-conf:/data --name helper alpine true
  docker cp ./conf/redis/redis-queue.conf helper:/data
  docker rm helper

  docker volume create frappe-redis-socketio-conf
  docker run -v frappe-redis-socketio-conf:/data --name helper alpine true
  docker cp ./conf/redis/redis-socketio.conf helper:/data
  docker rm helper


elif [ $1 == 'init_frappe' ]
then
  
  docker exec -i -u root frappe bash -c "cd /home/frappe && chown -R frappe:frappe ./*" 
  docker exec -it frappe bash -c "cd .. && bench init frappe-bench --skip-bench-mkdir --skip-redis-config-generation && cd frappe-bench"
  docker exec -it frappe bash -c "mv Procfile_docker Procfile && mv sites/common_site_config_docker.json sites/common_site_config.json"
  docker exec -it -u root frappe bash -c "apt-get install -y vim && apt-get install -y sudo && usermod -aG sudo frappe && printf '# User rules for frappe\nfrappe ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/frappe"
  docker exec -it frappe bash -c "bench set-mariadb-host mariadb"
  docker exec -it frappe bash -c "bench new-site site1.local"
  docker exec -it frappe bash -c "bench get-app erpnext"
  docker exec -it frappe bash -c "bench --site site1.local install-app erpnext"

else
  while getopts ':hsc:' option; do
    case "$option" in
      h)
         display_usage
         exit
         ;;
      c)
         docker exec -it frappe bash -c "bench $OPTARG"
         ;;
      s)
         a=$(cd frappe-bench && ls sites/*/site_config.json | grep -o '/.\+/')
         a="${a//$'\n'/ }"
         a=$(echo $a | tr -d / )
         result="127.0.0.1 ${a}"
         echo $result
         docker exec -u root -i frappe bash -c "echo ${result} | tee --append /etc/hosts"
         docker exec -itu root frappe bash -c "printf '# User rules for frappe\nfrappe ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/frappe"
         ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
fi
